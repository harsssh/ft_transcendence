#!/usr/bin/env node

import { glob, mkdir, readFile, writeFile } from 'node:fs/promises'
import * as path from 'node:path'
import { defineCommand, runMain } from 'citty'

const main = defineCommand({
  args: {
    load: {
      type: 'string',
      required: true,
      alias: 'l',
      description: 'glob pattern matching src files',
    },
    outDir: {
      type: 'string',
      required: true,
      alias: 'o',
      description: 'path where the declaration file will be generated',
    },
  },
  async run({ args }) {
    const outDirPath = path.resolve(args.outDir)
    const outImports = []
    const outCradles = []

    for await (const rawSrcPath of glob(args.load)) {
      const srcPath = path.resolve(rawSrcPath)
      const src = (await readFile(srcPath)).toString()

      if (!src.match(/\nexport default/)) {
        continue
      }

      const key = path.parse(srcPath).name
      const srcPathFromOutFile = path.relative(outDirPath, srcPath)

      outImports.push(`import type ${key} from './${srcPathFromOutFile}'`)
      outCradles.push(`  ${key}: ReturnType<typeof ${key}>`)
    }

    const outFilePath = `${outDirPath}/awilix-types.d.ts`
    const content = `// generated by awilix-types
${outImports.join('\n')}

export type Cradle = {
${outCradles.join('\n')}
}
`

    await mkdir(outDirPath, { recursive: true })
    await writeFile(outFilePath, content)
  },
})

runMain(main)
