import { glob, mkdir, readFile, writeFile } from 'node:fs/promises'
import * as path from 'node:path'

export const generateTypes = async (args: { load: string; outDir: string }) => {
  const outDirPath = path.resolve(args.outDir)
  const outImports = []
  const outCradles = []

  for await (const rawSrcPath of glob(args.load)) {
    const srcPath = path.resolve(rawSrcPath)
    const src = (await readFile(srcPath)).toString()

    if (!src.match(/(^|\n)export default/)) {
      continue
    }

    const key = path.parse(srcPath).name
    const srcPathFromOutFile = path.relative(outDirPath, srcPath)

    outImports.push(`import type ${key} from './${srcPathFromOutFile}'`)
    outCradles.push(`  ${key}: ReturnType<typeof ${key}>`)
  }

  const outFilePath = `${outDirPath}/awilix-types.d.ts`
  const content = `// generated by awilix-types
${outImports.join('\n')}

export type Cradle = {
${outCradles.join('\n')}
}
`

  await mkdir(outDirPath, { recursive: true })
  await writeFile(outFilePath, content)
}
